package monitors

// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/hexdigest/gowrap/bd05dcaf6963696b62ac150a98a59674456c6c53/templates/logrus
// gowrap: http://github.com/hexdigest/gowrap

//go:generate gowrap gen -p module07/internal/monitors -i Monitor -t https://raw.githubusercontent.com/hexdigest/gowrap/bd05dcaf6963696b62ac150a98a59674456c6c53/templates/logrus -o monitor_with_log.go -l ""

import (
	"fmt"
	"github.com/sirupsen/logrus"
)

// MonitorWithLogrus implements Monitor that is instrumented with logrus logger
type MonitorWithLogrus struct {
	_log  *logrus.Entry
	_base Monitor
}

// NewMonitorWithLogrus instruments an implementation of the Monitor with simple logging
func NewMonitorWithLogrus(base Monitor, log *logrus.Entry) MonitorWithLogrus {
	return MonitorWithLogrus{
		_base: base,
		_log:  log,
	}
}

// Run implements Monitor
func (_d MonitorWithLogrus) Run() (err error) {
	_d._log.Debug("MonitorWithLogrus: calling Run")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Error("MonitorWithLogrus: method Run returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Debug("MonitorWithLogrus: method Run finished")
		}
	}()
	return _d._base.Run()
}

// Type implements Monitor
func (_d MonitorWithLogrus) Type() (s1 string) {
	_d._log.Debug("MonitorWithLogrus: calling Type")
	defer func() {
		_d._log.WithFields(logrus.Fields(map[string]interface{}{
			"s1": s1})).Debug("MonitorWithLogrus: method Type finished")
	}()
	return _d._base.Type()
}

///////////

type Monitor interface {
	Type() string
	Run() error
}

const EnvironmentMonitorType = "monitor_type_simple"

type simpleMonitor struct {
	monitorType string
}

func NewSimpleMonitor() Monitor {
	return &simpleMonitor{
		monitorType: EnvironmentMonitorType,
	}
}

func (m *simpleMonitor) Type() string {
	return m.monitorType
}

func (m *simpleMonitor) Run() error {
	fmt.Printf("run monitor: %s\n", m.monitorType)
	return nil
}
